"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var simple_better_fetch_1 = __importDefault(require("simple-better-fetch"));
var TwitchApi = /** @class */ (function () {
    function TwitchApi(options) {
        this.options = options;
        if (!options) {
            throw new Error("missing options");
        }
        this.clientId = options.clientId;
        this.authorizationKey = options.authorizationKey;
        this.clientSecret = options.clientSecret;
        this.kraken = !!options.kraken;
    }
    Object.defineProperty(TwitchApi.prototype, "isUnAuthenticated", {
        get: function () {
            return this.clientId == undefined || this.authorizationKey == undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TwitchApi.prototype, "copy", {
        get: function () {
            return new TwitchApi({
                clientId: this.clientId,
                authorizationKey: this.authorizationKey,
                clientSecret: this.clientSecret,
                kraken: this.kraken,
            });
        },
        enumerable: false,
        configurable: true
    });
    TwitchApi.prototype.fetch = function (url, fetchOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var method, body, headers, kraken, isKrakenGet, options, json, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!fetchOptions)
                            fetchOptions = {};
                        method = fetchOptions.method, body = fetchOptions.body, headers = fetchOptions.headers, kraken = fetchOptions.kraken;
                        isKrakenGet = this.kraken || kraken;
                        options = method === "POST"
                            ? {
                                method: method || "GET",
                                headers: __assign(__assign({ "Client-ID": this.clientId || "", Authorization: (isKrakenGet ? "OAuth" : "Bearer") + " " + this.authorizationKey }, (headers || {})), (isKrakenGet ? { Accept: "application/vnd.twitchtv.v5+json" } : {})),
                                body: body || "",
                            }
                            : {
                                method: method || "GET",
                                headers: __assign(__assign({ "Client-ID": this.clientId || "", Authorization: (isKrakenGet ? "OAuth" : "Bearer") + " " + this.authorizationKey }, (headers || {})), (isKrakenGet ? { Accept: "application/vnd.twitchtv.v5+json" } : {})),
                            };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, simple_better_fetch_1.default(url, options)];
                    case 2:
                        json = _a.sent();
                        return [2 /*return*/, json];
                    case 3:
                        err_1 = _a.sent();
                        // TODO add a better handler
                        throw err_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    TwitchApi.prototype.fetchModChannels = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var modApiUrl, response, channels, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modApiUrl = "https://modlookup.3v.fi/api/user-v3/" + username;
                        return [4 /*yield*/, this.fetch(modApiUrl)];
                    case 1:
                        response = _a.sent();
                        channels = response.channels;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 6, , 7]);
                        _a.label = 3;
                    case 3:
                        if (!response.cursor) return [3 /*break*/, 5];
                        modApiUrl = "https://modlookup.3v.fi/api/user-v3/" + username + "?cursor=" + response.cursor;
                        return [4 /*yield*/, this.fetch(modApiUrl)];
                    case 4:
                        response = _a.sent();
                        channels = __spreadArrays(channels, response.channels);
                        return [3 /*break*/, 3];
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/, channels];
                }
            });
        });
    };
    TwitchApi.prototype.getUserModerationChannels = function (username, convert) {
        return __awaiter(this, void 0, void 0, function () {
            var channels, ModChannels;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchModChannels(username)];
                    case 1:
                        channels = _a.sent();
                        if (!(this.isUnAuthenticated || !convert)) return [3 /*break*/, 2];
                        return [2 /*return*/, channels];
                    case 2: return [4 /*yield*/, Promise.all(channels.map(function (channel) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, this.getUserInfo(channel.name)];
                        }); }); }))];
                    case 3:
                        ModChannels = _a.sent();
                        return [2 /*return*/, ModChannels];
                }
            });
        });
    };
    TwitchApi.prototype.getUserModerators = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var userInfo, userId, apiURL, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUserInfo(username)];
                    case 1:
                        userInfo = _a.sent();
                        userId = userInfo.id;
                        apiURL = "https://api.twitch.tv/helix/moderation/moderators?broadcaster_id=" + userId;
                        return [4 /*yield*/, this.fetch(apiURL)];
                    case 2:
                        response = _a.sent();
                        return [2 /*return*/, response.data[0]];
                }
            });
        });
    };
    TwitchApi.prototype.getUserInfo = function (username, forceUsername) {
        return __awaiter(this, void 0, void 0, function () {
            var key, apiURL, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.isUnAuthenticated) {
                            throw new Error("Missing either your clientId or Authorization Key");
                        }
                        key = "login";
                        if (username.replace(/\d/g, "") === "" && !forceUsername)
                            key = "id";
                        apiURL = "https://api.twitch.tv/helix/users?" + key + "=" + username;
                        return [4 /*yield*/, this.fetch(apiURL)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data[0]];
                }
            });
        });
    };
    TwitchApi.prototype.getBadgesByUsername = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var userInfo, userId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUserInfo(username)];
                    case 1:
                        userInfo = _a.sent();
                        userId = userInfo.id;
                        return [2 /*return*/, this.getBadgesById(userId)];
                }
            });
        });
    };
    TwitchApi.prototype.getBadgesById = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
            var customBadgeURL, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        customBadgeURL = "https://badges.twitch.tv/v1/badges/channels/" + userId + "/display";
                        return [4 /*yield*/, this.fetch(customBadgeURL)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.badge_sets];
                }
            });
        });
    };
    TwitchApi.prototype.getGlobalBadges = function () {
        return __awaiter(this, void 0, void 0, function () {
            var globalBadgeResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch("https://badges.twitch.tv/v1/badges/global/display")];
                    case 1:
                        globalBadgeResponse = _a.sent();
                        return [2 /*return*/, globalBadgeResponse.badge_sets];
                }
            });
        });
    };
    TwitchApi.prototype.refreshToken = function (refreshToken, clientSecret) {
        return __awaiter(this, void 0, void 0, function () {
            var apiURL;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.clientId || (!this.clientSecret && !clientSecret)) {
                            throw new Error("Missing client id or client secret required to refresh a refresh token");
                        }
                        apiURL = "https://id.twitch.tv/oauth2/token?client_id=" + this.clientId + "&client_secret=" + (this.clientSecret || clientSecret) + "&grant_type=refresh_token&refresh_token=" + refreshToken;
                        return [4 /*yield*/, this.fetch(apiURL, { method: "POST" })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TwitchApi.prototype.getBttvEmotes = function (channelName) {
        return __awaiter(this, void 0, void 0, function () {
            var bttvEmotes, bttvRegex, bttvResponse, emotes, bttvChannelResponse, channelEmotes, regexStr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bttvEmotes = {};
                        return [4 /*yield*/, simple_better_fetch_1.default("https://api.betterttv.net/2/emotes")];
                    case 1:
                        bttvResponse = _a.sent();
                        return [4 /*yield*/, bttvResponse.json()];
                    case 2:
                        emotes = (_a.sent()).emotes;
                        return [4 /*yield*/, simple_better_fetch_1.default("https://api.betterttv.net/2/channels/" + channelName)];
                    case 3:
                        bttvChannelResponse = _a.sent();
                        return [4 /*yield*/, bttvChannelResponse.json()];
                    case 4:
                        channelEmotes = (_a.sent()).emotes;
                        if (channelEmotes) {
                            emotes = emotes.concat(channelEmotes);
                        }
                        regexStr = "";
                        emotes.forEach(function (_a, i) {
                            var code = _a.code, id = _a.id;
                            bttvEmotes[code] = id;
                            regexStr += code.replace(/\(/, "\\(").replace(/\)/, "\\)") + (i === emotes.length - 1 ? "" : "|");
                        });
                        bttvRegex = new RegExp("(?<=^|\\s)(" + regexStr + ")(?=$|\\s)", "g");
                        return [2 /*return*/, { bttvEmotes: bttvEmotes, bttvRegex: bttvRegex }];
                }
            });
        });
    };
    TwitchApi.prototype.getFfzEmotes = function (channelName) {
        return __awaiter(this, void 0, void 0, function () {
            var ffzEmotes, ffzRegex, ffzResponse, ffzChannelResponse, sets, _a, room, channelSets, regexStr, appendEmotes, setnum;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        ffzEmotes = {};
                        return [4 /*yield*/, simple_better_fetch_1.default("https://api.frankerfacez.com/v1/set/global")];
                    case 1:
                        ffzResponse = _b.sent();
                        return [4 /*yield*/, simple_better_fetch_1.default("https://api.frankerfacez.com/v1/room/" + channelName)];
                    case 2:
                        ffzChannelResponse = _b.sent();
                        return [4 /*yield*/, ffzResponse.json()];
                    case 3:
                        sets = (_b.sent()).sets;
                        return [4 /*yield*/, ffzChannelResponse.json()];
                    case 4:
                        _a = _b.sent(), room = _a.room, channelSets = _a.sets;
                        regexStr = "";
                        appendEmotes = function (_a, i, emotes) {
                            var name = _a.name, urls = _a.urls;
                            ffzEmotes[name] = "https:" + Object.values(urls).pop();
                            regexStr += name + (i === emotes.length - 1 ? "" : "|");
                        };
                        sets[3].emoticons.forEach(appendEmotes);
                        if (channelSets && room) {
                            setnum = room.set;
                            channelSets[setnum].emoticons.forEach(appendEmotes);
                        }
                        ffzRegex = new RegExp("(?<=^|\\s)(" + regexStr + ")(?=$|\\s)", "g");
                        return [2 /*return*/, { ffzEmotes: ffzEmotes, ffzRegex: ffzRegex }];
                }
            });
        });
    };
    TwitchApi.prototype.getCheerMotes = function (broadcaster_id) {
        return __awaiter(this, void 0, void 0, function () {
            var query, CheerMotes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = broadcaster_id ? "?broadcaster_id=" + broadcaster_id : "";
                        return [4 /*yield*/, this.fetch("https://api.twitch.tv/helix/bits/cheermotes" + query)];
                    case 1:
                        CheerMotes = (_a.sent()).data;
                        return [2 /*return*/, CheerMotes];
                }
            });
        });
    };
    // Kraken functions
    TwitchApi.prototype.krakenGetUserById = function (user_id, kraken) {
        return __awaiter(this, void 0, void 0, function () {
            var userInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!kraken && !this.kraken) {
                            throw new Error("Kraken must be enable to access this endpoint");
                        }
                        return [4 /*yield*/, this.fetch("https://api.twitch.tv/kraken/users/" + user_id, { kraken: kraken })];
                    case 1:
                        userInfo = _a.sent();
                        return [2 /*return*/, userInfo];
                }
            });
        });
    };
    TwitchApi.prototype.krakenGetUserEmotes = function (user_id, kraken) {
        return __awaiter(this, void 0, void 0, function () {
            var emotes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!kraken && !this.kraken) {
                            throw new Error("Kraken must be enable to access this endpoint");
                        }
                        return [4 /*yield*/, this.fetch("https://api.twitch.tv/kraken/users/" + user_id + "/emotes", { kraken: kraken })];
                    case 1:
                        emotes = _a.sent();
                        if (emotes) {
                            return [2 /*return*/, emotes.emoticon_sets];
                        }
                        else {
                            return [2 /*return*/, {}];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    TwitchApi.prototype.krakenGetUserFollows = function (user_id, kraken, options) {
        return __awaiter(this, void 0, void 0, function () {
            var urlQuery, apiURL, follows;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!kraken && !this.kraken) {
                            throw new Error("Kraken must be enable to access this endpoint");
                        }
                        urlQuery = options ? "?" + Object.entries(options).reduce(function (query, _a) {
                            var key = _a[0], val = _a[1];
                            return query + "&" + key + "=" + val;
                        }, "") : "";
                        apiURL = "https://api.twitch.tv/kraken/users/" + user_id + "/follows/channels" + urlQuery;
                        return [4 /*yield*/, this.fetch(apiURL, { kraken: kraken })];
                    case 1:
                        follows = _a.sent();
                        return [2 /*return*/, {
                                total: follows["_total"],
                                follows: follows.follows,
                                more: (options.limit || 25) + (options.offset || 0) < follows["_total"]
                            }];
                }
            });
        });
    };
    TwitchApi.prototype.krakenFollowChannel = function (following_user, channel_to_follow, kraken) {
        return __awaiter(this, void 0, void 0, function () {
            var apiUrl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!kraken && !this.kraken) {
                            throw new Error("Kraken must be enable to access this endpoint");
                        }
                        apiUrl = "https://api.twitch.tv/kraken/users/" + following_user + "/follows/channels/" + channel_to_follow;
                        return [4 /*yield*/, this.fetch(apiUrl, { kraken: kraken, method: "PUT" })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TwitchApi.prototype.krakenUnFollowChannel = function (following_user, channel_to_unfollow, kraken) {
        return __awaiter(this, void 0, void 0, function () {
            var apiUrl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!kraken && !this.kraken) {
                            throw new Error("Kraken must be enable to access this endpoint");
                        }
                        apiUrl = "https://api.twitch.tv/kraken/users/" + following_user + "/follows/channels/" + channel_to_unfollow;
                        return [4 /*yield*/, this.fetch(apiUrl, { kraken: kraken, method: "DELETE" })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TwitchApi.prototype.krakenGetUserBlockList = function (user_id, kraken) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!kraken && !this.kraken) {
                    throw new Error("Kraken must be enable to access this endpoint");
                }
                return [2 /*return*/];
            });
        });
    };
    return TwitchApi;
}());
module.exports = TwitchApi;
