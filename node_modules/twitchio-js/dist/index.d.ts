interface TwitchApiOptions {
    clientId?: string;
    authorizationKey?: string;
    clientSecret?: string;
    kraken?: boolean;
}
interface FetchOptions {
    method?: string;
    headers?: object;
    body?: string;
    kraken?: boolean;
}
declare class TwitchApi {
    private options;
    private clientId?;
    private authorizationKey?;
    private clientSecret?;
    private kraken;
    constructor(options: TwitchApiOptions);
    get isUnAuthenticated(): boolean;
    get copy(): TwitchApi;
    fetch(url: string, fetchOptions?: FetchOptions): Promise<any>;
    fetchModChannels(username: string): Promise<any>;
    getUserModerationChannels(username: string, convert?: boolean): Promise<any>;
    getUserModerators(username: string): Promise<any>;
    getUserInfo(username: string, forceUsername?: boolean): Promise<any>;
    getBadgesByUsername(username: string): Promise<any>;
    getBadgesById(userId: string): Promise<any>;
    getGlobalBadges(): Promise<any>;
    refreshToken(refreshToken: string, clientSecret?: string): Promise<any>;
    getBttvEmotes(channelName: string): Promise<{
        bttvEmotes: any;
        bttvRegex: RegExp;
    }>;
    getFfzEmotes(channelName: string): Promise<{
        ffzEmotes: any;
        ffzRegex: RegExp;
    }>;
    getCheerMotes(broadcaster_id?: string): Promise<any>;
    krakenGetUserById(user_id: string, kraken?: boolean): Promise<any>;
    krakenGetUserEmotes(user_id: string, kraken: boolean): Promise<any>;
    krakenGetUserFollows(user_id: string, kraken: boolean, options: followsOptions): Promise<userFollows>;
    krakenFollowChannel(following_user: string, channel_to_follow: string, kraken?: boolean): Promise<void>;
    krakenUnFollowChannel(following_user: string, channel_to_unfollow: string, kraken?: boolean): Promise<void>;
    krakenGetUserBlockList(user_id: string, kraken?: boolean): Promise<void>;
}
interface userFollows {
    total: number;
    follows: any[];
    more: boolean;
}
interface followsOptions {
    limit?: number;
    offset?: number;
    direction?: "asc" | "desc";
    sortby?: "created_at" | "last_broadcast" | "login";
}
export = TwitchApi;
