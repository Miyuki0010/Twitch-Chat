"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TwitchPrivateMessage = void 0;
var tslib_1 = require("tslib");
var ircv3_1 = require("ircv3");
var twitch_common_1 = require("twitch-common");
var ChatUser_1 = require("../ChatUser");
var EmoteTools_1 = require("../Toolkit/EmoteTools");
/**
 * An IRC PRIVMSG, with easy accessors for commonly used data from its tags.
 */
var TwitchPrivateMessage = /** @class */ (function (_super) {
    tslib_1.__extends(TwitchPrivateMessage, _super);
    function TwitchPrivateMessage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TwitchPrivateMessage.prototype, "id", {
        /**
         * The ID of the message.
         */
        get: function () {
            return this._tags.get('id');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TwitchPrivateMessage.prototype, "userInfo", {
        /**
         * Info about the user that send the message, like their user ID and their status in the current channel.
         */
        get: function () {
            return new ChatUser_1.ChatUser(this._prefix.nick, this._tags);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TwitchPrivateMessage.prototype, "channelId", {
        /**
         * The ID of the channel the message is in.
         */
        get: function () {
            var _a;
            return (_a = this._tags.get('room-id')) !== null && _a !== void 0 ? _a : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TwitchPrivateMessage.prototype, "isCheer", {
        /**
         * Whether the message is a cheer.
         */
        get: function () {
            return this._tags.has('bits');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TwitchPrivateMessage.prototype, "bits", {
        /**
         * The number of bits cheered with the message.
         */
        get: function () {
            var _a;
            return Number((_a = this._tags.get('bits')) !== null && _a !== void 0 ? _a : 0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TwitchPrivateMessage.prototype, "totalBits", {
        /**
         * The number of bits cheered with the message.
         *
         * @deprecated Use {@TwitchPrivateMessage#bits} instead.
         */
        get: function () {
            return this.bits;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TwitchPrivateMessage.prototype, "emoteOffsets", {
        /**
         * The offsets of emote usages in the message.
         */
        get: function () {
            return EmoteTools_1.parseEmoteOffsets(this._tags.get('emotes'));
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Parses the message, separating text from emote usages.
     */
    TwitchPrivateMessage.prototype.parseEmotes = function () {
        var messageText = this.params.message;
        var foundEmotes = EmoteTools_1.parseEmotePositions(messageText, this.emoteOffsets);
        return EmoteTools_1.fillTextPositions(messageText, foundEmotes);
    };
    /**
     * Parses the message, separating text from emote usages and cheers.
     *
     * @param cheermotes A list of cheermotes
     */
    TwitchPrivateMessage.prototype.parseEmotesAndBits = function (cheermotes) {
        var messageText = this.params.message;
        var foundCheermotes = cheermotes.parseMessage(messageText);
        var foundEmotesAndCheermotes = tslib_1.__spread(EmoteTools_1.parseEmotePositions(messageText, this.emoteOffsets), foundCheermotes.map(function (cheermote) { return ({
            type: 'cheer',
            position: cheermote.position,
            length: cheermote.length,
            name: cheermote.name,
            amount: cheermote.amount,
            displayInfo: cheermote.displayInfo
        }); }));
        foundEmotesAndCheermotes.sort(function (a, b) { return a.position - b.position; });
        return EmoteTools_1.fillTextPositions(messageText, foundEmotesAndCheermotes);
    };
    TwitchPrivateMessage = tslib_1.__decorate([
        twitch_common_1.rtfm('twitch-chat-client', 'TwitchPrivateMessage', 'id')
    ], TwitchPrivateMessage);
    return TwitchPrivateMessage;
}(ircv3_1.MessageTypes.Commands.PrivateMessage));
exports.TwitchPrivateMessage = TwitchPrivateMessage;
